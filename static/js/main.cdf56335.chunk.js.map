{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortBy","setSortBy","isRevers","setIsRevers","visibleGoods","goods","sortField","isReversed","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iOAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,WACtBC,EAAoB,SA2BnB,IAAMC,EAAM,WACjB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EA5BR,SAA0BC,EAAOC,EAAWC,GAC1C,IAAIC,EAAa,YAAOH,GAqBxB,OAnBIC,GACFE,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQL,GACN,KAAKV,EACH,OAAOc,EAAME,cAAcD,GAE7B,KAAKd,EACH,OAAOa,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXN,IACFC,EAAgBA,EAAcM,WAGzBN,EAMcO,CAAiBpB,EAAiBK,EAAQE,GAE/D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBhB,IAAWJ,GAAuB,YAC/DsB,QAAS,kBAAMjB,EAAUL,IAH3B,iCASA,wBACEqB,KAAK,SACLD,UAAS,4BAAuBhB,IAAWH,GAAqB,YAChEqB,QAAS,kBAAMjB,EAAUJ,IAH3B,4BAQA,wBACEoB,KAAK,SACLD,UAAS,6BAAoC,IAAbd,GAAsB,YACtDgB,QAAS,kBAAMf,GAAaD,IAH9B,sBAQa,KAAXF,IAA8B,IAAbE,IACjB,wBACEe,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPf,GAAY,GACZF,EAAU,KALd,sBAaJ,6BACGG,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC5FnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cdf56335.chunk.js","sourcesContent":["import { useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, sortField, isReversed) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortBy, setSortBy] = useState('');\n  const [isRevers, setIsRevers] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortBy, isRevers);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortBy !== SORT_FIELD_ALPHABET && 'is-light'}`}\n          onClick={() => setSortBy(SORT_FIELD_ALPHABET)}\n\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortBy !== SORT_FIELD_LENGTH && 'is-light'}`}\n          onClick={() => setSortBy(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isRevers === false && 'is-light'}`}\n          onClick={() => setIsRevers(!isRevers)}\n        >\n          Reverse\n        </button>\n\n        {(sortBy !== '' || isRevers !== false) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setIsRevers(false);\n              setSortBy('');\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}